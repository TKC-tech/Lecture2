{"home":{"content":"# Lecture 2: Semantic HTML and CSS\n\nGame time, fam.\n\n![css](https://media1.giphy.com/media/13XW2MJE0XCoM0/giphy.gif)\n\n## Learning Objectives\n\n0. Semantic HTML tags, GitHub review\n1. Brief introduction to CSS: the querying language of HTML\n\n## To do List\n\n## [Warm up](#warm-up)\n## [Semantic HTML](#semantic-html)\n## [Intro to CSS](#intro-to-css)\n\n\n","idx":0},"title":{"content":"Lecture 2: Semantic HTML and CSS","idx":1},"desc":{"content":"This will be fun.","idx":2},"warm-u":{"content":"# Warm up\n---\n\nLet's get started with a quick exercise. \n\n## Exercise 1: GitHub Review\n---\nBuild me a superhero resume website with the following content:\n\n1. Page Title\n2. Image\n3. Education information\n4. Work Experience\n5. Interests and hobbies\n\nThen, **create a new GitHub repo**, **commit your website content**, and finally **deploy the site.**\n\n**QUESTION**: What should you name this HTML file? Why is it important?\n\n## Exercise 2: Adding a second page.\n---\nNow go ahead and add a second page to your web project.\n\nThen, **commit this new page** and **deploy once more to [GitBot](http://gitbot.co)**.\n\n**QUESTION**: How can you access this new page in the browser?\n\n## Exercise 3: Adding a local image\n---\n\n1. Create a new `images` folder in your project. \n2. Download a gif of your superhero and store it to images folder\n3. Attempt to load a **local** image that pulls from the image folder and not a URL\n\n## Path Finding\n---\n\nThere are two ways to reference media and other resources. \n\n#### Absolute VS Relative URLs\n---\nAbsolute/Relative URLs (or as they are sometimes called, **paths**).\n\n**Absolute URL**\n\nA URL that contains the **full path**. For example, **[https://validator.w3.org/nu/#textarea](https://validator.w3.org/nu/#textarea)** is an example of an absolute URL. \n\nContains both the **hostname** and the **full path** to file.\n\n**Relative URL**\n\nA URL that contains only a fragment of the full address. For example, **[/nu/textarea](/nu/textarea)**. **NOTE**: this won't actually work! However, the people in **https://validator.w3.org** would be able to use this correctly **because relative URLs use the hostname of the page they are on**.\n\n**When to use each type**\n\nIn general, if you are linking to an image or some other resource that lives on the internet, use **absolute paths**.\n\nWhen you are linking to something like **CSS stylesheets** or **javascript files** or **images that live on your servere** you should **definitely** use relative paths.\n\n## Exercises\n---\n\nLet's practice what we have learned.\n\n**[Consider this repo](https://github.com/FEWDMaterials/RelativePathsReview)**.\n\nYou are given several \"websites\". However they are set up in strange configurations! \n\n**For Each Folder**\n\n1. **WITHOUT** rearranging the files, link the proper css folders in the **`HEAD`** section\n2. If you do it right, hovering over the page in the browser will cause it to change colors\n\n\n\n\n\n\n","idx":3},"semantic-html":{"content":"# Semantic HTML\n---\n\nHTML5 introduces a plethora of new tags. These tags are mainly used to dictate structure and meaning to the **information** that is presented on our website.\n\n#### Exercises\n\nHere are the main problems that we will be working towards in this section of the class.\n\n#### Problem 1:\n---\n\nTake the resume that you built for the warmup and redefine the content using the **semantic** html elements we will be learning about today.\n\n#### Problem 2:\n---\nLet's use the **semantic** html tags we learned about to define the markup for the page.\n\n**[Starter code on GitHub](https://github.com/FEWDMaterials/WendyBite_BEM)**: download this repo then create a new repo on GitHub to for this project.\n\nAlso for now, don't worry about the styles that we will inevitably need to complete this assignment.\n<div>\n<img src=\"https://raw.githubusercontent.com/FEWDMaterials/WendyBite_BEM/master/assignmentMaterials/WendyBite_AboutMe.png\" style=\"width: 100%; height: auto;\">\n</div>\n\n\n\n#### Properly marking up your page\n---\nDon't worry about what the `id` attributes mean for now.\n\n![site structure](http://i.stack.imgur.com/L4qMt.png)\n\n#### Sections VS Articles\n---\nUse **sections** when you are outlining **chapters in a book**. \n\n**EXAMPLE**: A dessert cookbook could have chapters on **cake** recipes vs **pie** recipes.\n\nUse **articles** when you are defining say **poems** in a volume.\n\n**EXAMPLE**: In our dessert cookbook, **each recipe** in the **cake** section would be an **article**.\n\nYou can nest **articles** into **sections** and **sections** into **articles**.\n\n**EXAMPLE**\n\nArticles can go inside section tags\n```html\n<section>\n    <article>\n      <!-- first blog post -->\n    </article>\n    \n    <!-- .... more articles here ... -->\n</section>\n```\n\nSections can also go inside article tags\n```html\n<article>\n  <section>\n     <!-- introduction -->\n  </section>\n\n  <section>\n     <!-- content -->\n  </section>\n\n  <section>\n     <!-- summary, etc -->\n  </section>\n</article>\n```\n\n**THIS STUFF IS PARTLY SUBJECTIVE; THERE REALLY IS NO ONE RIGHT ANSWER**. As long as we are consistent and don't violate the laws of HTML (ie: we don't put a **p** tag inside a **a** tag, or something like that). \n\n#### Headers, Footers, Nav, Main\n---\n\n* Use headers/foorters/navs as **often as you'd like** within each section/article/aside\n* Each sectioning element (section/article/aside) can have it's own `h1` tag (some validators say this is not recommended but this is still technically allowed)\n* I usually put `nav` tags inside the `header` or `footer` pages\n* **MAIN** can only be used once per page. Typically, it is used to define what the main content block of the page is. Don't have to use it though. \n* Essentially, **the blue in the previous image could be wrapped in a main tag**\n\n\n#### Semantic HTML5 Tags\n---\n\nHere are some of the main tags that are supported.\n\n**SECTION**: Represents a generic document or application section.\n\n**HEADER**: Represents a group of introductory or navigational aids..\n\n**FOOTER**: Represents a footer for a section and can contain information about the author, copyright information, et cetera.\n\n**NAV**: Represents a section of the document intended for navigation.\n\n**MAIN**: Defines the main content of a document.\n\n**ARTICLE**: Represents an independent piece of content of a document, such as a blog entry or newspaper article\n\n**ASIDE**: Represents a piece of content that is only slightly related to the rest of the page.\n\n#### More info on sections vs articles\n---\n\n**SECTION**: Used to either group different articles into different purposes or subjects, or to define the different sections of a single article.\n\n**ARTICLE**: `<article>` is related to `<section>`, but is distinctly different. Whereas `<section>` is for grouping distinct sections of content or functionality, `<article>` is for containing related individual standalone pieces of content, such as individual blog posts, videos, images or news items. \n\n\n\n\n","idx":4},"intro-to-css":{"content":"# Intro to CSS\n---\n\nLet's talk about **CSS**, or **Cascading Style SHeets**, the language that allows us to define styles and adjustments to default content on our webpages.\n\n### Exercises\n---\n\nHere are the main problems that we will aspire to be able to solve in this section.\n\n#### Problems 1 - 4\n---\n#### Log in to [Samantha](http://samantha.fewd.us/#/) First!\n\nThen, given the following pages, please complete the task outlined.\n\n#### [CSS Tag Selectors](http://samantha.fewd.us/#fork/mottaquikarim/CSS_Tag_Selectors) | [LIVE Instructor Version](http://samantha.fewd.us/#broadcast/mottaquikarim/CSS_Tag_Selectors)\n\n#### [CSS Class Selectors](http://samantha.fewd.us/#fork/mottaquikarim/CSS_Class_Selectors_2) | [LIVE Instructor Version](http://samantha.fewd.us/#broadcast/mottaquikarim/CSS_Class_Selectors_2)\n\n#### [CSS ID Selectors](http://samantha.fewd.us/#fork/mottaquikarim/CSS_ID_Selectors) | [LIVE Instructor Version](http://samantha.fewd.us/#broadcast/mottaquikarim/CSS_ID_Selectors)\n\n#### [Complex CSS Selectors](http://samantha.fewd.us/#fork/mottaquikarim/Complex_CSS_Selectors) | [LIVE Instructor Version](http://samantha.fewd.us/#broadcast/mottaquikarim/Complex_CSS_Selectors)\n\n<p></p>\n\n#### Intro to CSS\n---\n\n**Basic Definition**\n\nMethod for searching your html tags efficiently and styling the results it finds.\n\n** Three ways to CSS **\n\n1. This way is evil, we won't even talk about it.\n2. This way is also not very good, we won't even talk about it.\n3. This way is ideal! let's discuss how to link in external files to your index.html...\n\n** Selectors **\n\n**SELECTOR**: a keyword used to query your html tags, classes, ids -- (the last two are html attributes)\n\n**RULES**: the style attributes you are going to set\n\n**[CHEAT LINK](http://fewdmaterials.github.io/Lecture2FEWD71/selectors_and_specificity.html)**\n\n","idx":5},"__list__":["home","title","desc","warm-u","semantic-html","intro-to-css"]}